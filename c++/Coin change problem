#include <iostream>
#include <vector>
#include <climits> // for INT_MAX

using namespace std;

int solvetab(vector<int> &num, int x) {
    vector<int> dp(x + 1, INT_MAX);
    dp[0] = 0; // Base case: zero coins needed to form zero

    for (int i = 1; i <= x; i++) {
        // Trying to solve for every amount from 1 to x
        for (int j = 0; j < num.size(); j++) {
            if (i - num[j] >= 0 && dp[i - num[j]] != INT_MAX) {
                dp[i] = min(dp[i], 1 + dp[i - num[j]]);
            }
        }
    }
    return dp[x] == INT_MAX ? -1 : dp[x]; // Return -1 if not possible
}

int minimumElements(vector<int> &num, int x) {
    return solvetab(num, x);
}

int main() {
    vector<int> num = {1, 2, 3}; // Example input vector
    int x = 5; // Example value of x
    int result = minimumElements(num, x);
    cout << "Minimum number of elements required to form " << x << " is: " << result << endl;
    return 0;
}
